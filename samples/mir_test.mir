// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn  update_ref::nested() -> i32 {
    let mut _0: i32;                     // return place in scope 0 at src/main.rs:18:20: 18:23
    let mut _1: *const i32;              // in scope 0 at src/main.rs:19:33: 19:57
    scope 1 {
    }

    bb0: {
        StorageLive(_1);                 // bb0[0]: scope 1 at src/main.rs:19:33: 19:57
        _1 = const 2863311530usize as *const i32 (Misc); // bb0[1]: scope 1 at src/main.rs:19:33: 19:57
                                         // ty::Const
                                         // + ty: usize
                                         // + val: Scalar(0x00000000aaaaaaaa)
                                         // mir::Constant
                                         // + span: src/main.rs:19:33: 19:43
                                         // + ty: usize
                                         // + literal: Const { ty: usize, val: Scalar(0x00000000aaaaaaaa) }
        _0 = const std::ptr::read::<i32>(move _1) -> bb1; // bb0[2]: scope 1 at src/main.rs:19:18: 19:58
                                         // ty::Const
                                         // + ty: unsafe fn(*const i32) -> i32 {std::ptr::read::<i32>}
                                         // + val: Scalar(<ZST>)
                                         // mir::Constant
                                         // + span: src/main.rs:19:18: 19:32
                                         // + ty: unsafe fn(*const i32) -> i32 {std::ptr::read::<i32>}
                                         // + literal: Const { ty: unsafe fn(*const i32) -> i32 {std::ptr::read::<i32>}, val: Scalar(<ZST>) }
    }

    bb1: {
        StorageDead(_1);                 // bb1[0]: scope 1 at src/main.rs:19:57: 19:58
        return;                          // bb1[1]: scope 0 at src/main.rs:20:6: 20:6
    }
}

fn  other(_1: *mut u32) -> () {
    let mut _0: ();                      // return place in scope 0 at src/main.rs:13:32: 13:32

    bb0: {
        (*_1) = const 3405691582u32;     // bb0[0]: scope 0 at src/main.rs:14:5: 14:22
                                         // ty::Const
                                         // + ty: u32
                                         // + val: Scalar(0xcafebabe)
                                         // mir::Constant
                                         // + span: src/main.rs:14:12: 14:22
                                         // + ty: u32
                                         // + literal: Const { ty: u32, val: Scalar(0xcafebabe) }
        return;                          // bb0[1]: scope 0 at src/main.rs:15:2: 15:2
    }
}

fn  not_uaf(_1: &str) -> () {
    let mut _0: ();                      // return place in scope 0 at src/main.rs:24:35: 24:35
    let _2: ();                          // in scope 0 at src/main.rs:28:9: 28:60
    let mut _3: *const i8;               // in scope 0 at src/main.rs:28:16: 28:59
    let mut _4: &std::ffi::CStr;         // in scope 0 at src/main.rs:28:16: 28:50
    let mut _5: &std::ffi::CStr;         // in scope 0 at src/main.rs:28:16: 28:50
    let mut _6: &std::ffi::CString;      // in scope 0 at src/main.rs:28:16: 28:50
    let _7: std::ffi::CString;           // in scope 0 at src/main.rs:28:16: 28:50
    let mut _8: std::result::Result<std::ffi::CString, std::ffi::NulError>; // in scope 0 at src/main.rs:28:16: 28:41
    let mut _9: &str;                    // in scope 0 at src/main.rs:28:29: 28:40
    scope 1 {
    }

    bb0: {
        StorageLive(_2);                 // bb0[0]: scope 1 at src/main.rs:28:9: 28:60
        StorageLive(_3);                 // bb0[1]: scope 1 at src/main.rs:28:16: 28:59
        StorageLive(_4);                 // bb0[2]: scope 1 at src/main.rs:28:16: 28:50
        StorageLive(_5);                 // bb0[3]: scope 1 at src/main.rs:28:16: 28:50
        StorageLive(_6);                 // bb0[4]: scope 1 at src/main.rs:28:16: 28:50
        StorageLive(_7);                 // bb0[5]: scope 1 at src/main.rs:28:16: 28:50
        StorageLive(_8);                 // bb0[6]: scope 1 at src/main.rs:28:16: 28:41
        StorageLive(_9);                 // bb0[7]: scope 1 at src/main.rs:28:29: 28:40
        _9 = _1;                         // bb0[8]: scope 1 at src/main.rs:28:29: 28:40
        _8 = const std::ffi::CString::new::<&str>(move _9) -> bb2; // bb0[9]: scope 1 at src/main.rs:28:16: 28:41
                                         // ty::Const
                                         // + ty: fn(&str) -> std::result::Result<std::ffi::CString, std::ffi::NulError> {std::ffi::CString::new::<&str>}
                                         // + val: Scalar(<ZST>)
                                         // mir::Constant
                                         // + span: src/main.rs:28:16: 28:28
                                         // + ty: fn(&str) -> std::result::Result<std::ffi::CString, std::ffi::NulError> {std::ffi::CString::new::<&str>}
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&str) -> std::result::Result<std::ffi::CString, std::ffi::NulError> {std::ffi::CString::new::<&str>}, val: Scalar(<ZST>) }
    }

    bb1 (cleanup): {
        resume;                          // bb1[0]: scope 0 at src/main.rs:24:1: 30:2
    }

    bb2: {
        StorageDead(_9);                 // bb2[0]: scope 1 at src/main.rs:28:40: 28:41
        _7 = const std::result::Result::<std::ffi::CString, std::ffi::NulError>::unwrap(move _8) -> bb3; // bb2[1]: scope 1 at src/main.rs:28:16: 28:50
                                         // ty::Const
                                         // + ty: fn(std::result::Result<std::ffi::CString, std::ffi::NulError>) -> std::ffi::CString {std::result::Result::<std::ffi::CString, std::ffi::NulError>::unwrap}
                                         // + val: Scalar(<ZST>)
                                         // mir::Constant
                                         // + span: src/main.rs:28:42: 28:48
                                         // + ty: fn(std::result::Result<std::ffi::CString, std::ffi::NulError>) -> std::ffi::CString {std::result::Result::<std::ffi::CString, std::ffi::NulError>::unwrap}
                                         // + literal: Const { ty: fn(std::result::Result<std::ffi::CString, std::ffi::NulError>) -> std::ffi::CString {std::result::Result::<std::ffi::CString, std::ffi::NulError>::unwrap}, val: Scalar(<ZST>) }
    }

    bb3: {
        _6 = &_7;                        // bb3[0]: scope 1 at src/main.rs:28:16: 28:50
        _5 = const <std::ffi::CString as std::ops::Deref>::deref(move _6) -> [return: bb4, unwind: bb5]; // bb3[1]: scope 1 at src/main.rs:28:16: 28:50
                                         // ty::Const
                                         // + ty: for<'r> fn(&'r std::ffi::CString) -> &'r <std::ffi::CString as std::ops::Deref>::Target {<std::ffi::CString as std::ops::Deref>::deref}
                                         // + val: Scalar(<ZST>)
                                         // mir::Constant
                                         // + span: src/main.rs:28:16: 28:50
                                         // + ty: for<'r> fn(&'r std::ffi::CString) -> &'r <std::ffi::CString as std::ops::Deref>::Target {<std::ffi::CString as std::ops::Deref>::deref}
                                         // + literal: Const { ty: for<'r> fn(&'r std::ffi::CString) -> &'r <std::ffi::CString as std::ops::Deref>::Target {<std::ffi::CString as std::ops::Deref>::deref}, val: Scalar(<ZST>) }
    }

    bb4: {
        _4 = _5;                         // bb4[0]: scope 1 at src/main.rs:28:16: 28:50
        StorageDead(_8);                 // bb4[1]: scope 1 at src/main.rs:28:49: 28:50
        StorageDead(_6);                 // bb4[2]: scope 1 at src/main.rs:28:49: 28:50
        _3 = const std::ffi::CStr::as_ptr(move _4) -> [return: bb6, unwind: bb5]; // bb4[3]: scope 1 at src/main.rs:28:16: 28:59
                                         // ty::Const
                                         // + ty: for<'r> fn(&'r std::ffi::CStr) -> *const i8 {std::ffi::CStr::as_ptr}
                                         // + val: Scalar(<ZST>)
                                         // mir::Constant
                                         // + span: src/main.rs:28:51: 28:57
                                         // + ty: for<'r> fn(&'r std::ffi::CStr) -> *const i8 {std::ffi::CStr::as_ptr}
                                         // + literal: Const { ty: for<'r> fn(&'r std::ffi::CStr) -> *const i8 {std::ffi::CStr::as_ptr}, val: Scalar(<ZST>) }
    }

    bb5 (cleanup): {
        drop(_7) -> bb1;                 // bb5[0]: scope 1 at src/main.rs:28:60: 28:61
    }

    bb6: {
        StorageDead(_4);                 // bb6[0]: scope 1 at src/main.rs:28:58: 28:59
        _2 = const strcpy(move _3) -> [return: bb7, unwind: bb5]; // bb6[1]: scope 1 at src/main.rs:28:9: 28:60
                                         // ty::Const
                                         // + ty: unsafe extern "C" fn(*const i8) {strcpy}
                                         // + val: Scalar(<ZST>)
                                         // mir::Constant
                                         // + span: src/main.rs:28:9: 28:15
                                         // + ty: unsafe extern "C" fn(*const i8) {strcpy}
                                         // + literal: Const { ty: unsafe extern "C" fn(*const i8) {strcpy}, val: Scalar(<ZST>) }
    }

    bb7: {
        StorageDead(_3);                 // bb7[0]: scope 1 at src/main.rs:28:59: 28:60
        drop(_7) -> bb8;                 // bb7[1]: scope 1 at src/main.rs:28:60: 28:61
    }

    bb8: {
        StorageDead(_7);                 // bb8[0]: scope 1 at src/main.rs:28:60: 28:61
        StorageDead(_5);                 // bb8[1]: scope 1 at src/main.rs:28:60: 28:61
        StorageDead(_2);                 // bb8[2]: scope 1 at src/main.rs:28:60: 28:61
        return;                          // bb8[3]: scope 0 at src/main.rs:30:2: 30:2
    }
}

static  inner::MSG: &str = {
    let mut _0: &str;                    // return place in scope 0 at src/main.rs:6:21: 6:25

    bb0: {
        _0 = const "YES";                // bb0[0]: scope 0 at src/main.rs:6:28: 6:33
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Slice { data: Allocation { bytes: [89, 69, 83], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [7], len: Size { raw: 3 } }, align: Align { pow2: 0 }, mutability: Immutable, extra: () }, start: 0, end: 3 }
                                         // mir::Constant
                                         // + span: src/main.rs:6:28: 6:33
                                         // + ty: &str
                                         // + literal: Const { ty: &str, val: Slice { data: Allocation { bytes: [89, 69, 83], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [7], len: Size { raw: 3 } }, align: Align { pow2: 0 }, mutability: Immutable, extra: () }, start: 0, end: 3 } }
        return;                          // bb0[1]: scope 0 at src/main.rs:6:5: 6:34
    }
}

fn  update_ref(_1: &mut u32) -> () {
    let mut _0: ();                      // return place in scope 0 at src/main.rs:17:30: 17:30

    bb0: {
        (*_1) = const 305419896u32;      // bb0[0]: scope 0 at src/main.rs:21:5: 21:22
                                         // ty::Const
                                         // + ty: u32
                                         // + val: Scalar(0x12345678)
                                         // mir::Constant
                                         // + span: src/main.rs:21:12: 21:22
                                         // + ty: u32
                                         // + literal: Const { ty: u32, val: Scalar(0x12345678) }
        return;                          // bb0[1]: scope 0 at src/main.rs:22:2: 22:2
    }
}

fn  main() -> () {
    let mut _0: ();                      // return place in scope 0 at src/main.rs:9:11: 9:11
    let _1: ();                          // in scope 0 at <::std::macros::println macros>:2:3: 2:65
    let mut _2: std::fmt::Arguments;     // in scope 0 at <::std::macros::println macros>:2:29: 2:63
    let mut _3: &[&str];                 // in scope 0 at src/main.rs:10:14: 10:29
    let mut _4: &[&str; 1];              // in scope 0 at src/main.rs:10:14: 10:29
    let mut _5: &[&str; 1];              // in scope 0 at src/main.rs:10:14: 10:29
    let mut _6: &[std::fmt::ArgumentV1]; // in scope 0 at src/main.rs:10:14: 10:29
    let mut _7: &[std::fmt::ArgumentV1; 0]; // in scope 0 at src/main.rs:10:14: 10:29
    let mut _8: &[std::fmt::ArgumentV1; 0]; // in scope 0 at src/main.rs:10:14: 10:29

    bb0: {
        StorageLive(_1);                 // bb0[0]: scope 0 at <::std::macros::println macros>:2:3: 2:65
        StorageLive(_2);                 // bb0[1]: scope 0 at <::std::macros::println macros>:2:29: 2:63
        StorageLive(_3);                 // bb0[2]: scope 0 at src/main.rs:10:14: 10:29
        StorageLive(_4);                 // bb0[3]: scope 0 at src/main.rs:10:14: 10:29
        StorageLive(_5);                 // bb0[4]: scope 0 at src/main.rs:10:14: 10:29
        _5 = &(promoted[1]: [&str; 1]);  // bb0[5]: scope 0 at src/main.rs:10:14: 10:29
        _4 = _5;                         // bb0[6]: scope 0 at src/main.rs:10:14: 10:29
        _3 = move _4 as &[&str] (Pointer(Unsize)); // bb0[7]: scope 0 at src/main.rs:10:14: 10:29
        StorageDead(_4);                 // bb0[8]: scope 0 at src/main.rs:10:28: 10:29
        StorageLive(_6);                 // bb0[9]: scope 0 at src/main.rs:10:14: 10:29
        StorageLive(_7);                 // bb0[10]: scope 0 at src/main.rs:10:14: 10:29
        StorageLive(_8);                 // bb0[11]: scope 0 at src/main.rs:10:14: 10:29
        _8 = &(promoted[0]: [std::fmt::ArgumentV1; 0]); // bb0[12]: scope 0 at src/main.rs:10:14: 10:29
        _7 = _8;                         // bb0[13]: scope 0 at src/main.rs:10:14: 10:29
        _6 = move _7 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // bb0[14]: scope 0 at src/main.rs:10:14: 10:29
        StorageDead(_7);                 // bb0[15]: scope 0 at src/main.rs:10:28: 10:29
        _2 = const std::fmt::Arguments::new_v1(move _3, move _6) -> bb1; // bb0[16]: scope 0 at <::std::macros::println macros>:2:29: 2:63
                                         // ty::Const
                                         // + ty: fn(&[&str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1}
                                         // + val: Scalar(<ZST>)
                                         // mir::Constant
                                         // + span: <::std::macros::println macros>:2:29: 2:63
                                         // + ty: fn(&[&str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1}
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1}, val: Scalar(<ZST>) }
    }

    bb1: {
        StorageDead(_6);                 // bb1[0]: scope 0 at <::std::macros::println macros>:2:62: 2:63
        StorageDead(_3);                 // bb1[1]: scope 0 at <::std::macros::println macros>:2:62: 2:63
        _1 = const std::io::_print(move _2) -> bb2; // bb1[2]: scope 0 at <::std::macros::println macros>:2:3: 2:65
                                         // ty::Const
                                         // + ty: for<'r> fn(std::fmt::Arguments<'r>) {std::io::_print}
                                         // + val: Scalar(<ZST>)
                                         // mir::Constant
                                         // + span: <::std::macros::println macros>:2:3: 2:26
                                         // + ty: for<'r> fn(std::fmt::Arguments<'r>) {std::io::_print}
                                         // + literal: Const { ty: for<'r> fn(std::fmt::Arguments<'r>) {std::io::_print}, val: Scalar(<ZST>) }
    }

    bb2: {
        StorageDead(_2);                 // bb2[0]: scope 0 at <::std::macros::println macros>:2:64: 2:65
        StorageDead(_8);                 // bb2[1]: scope 0 at <::std::macros::println macros>:2:66: 2:67
        StorageDead(_5);                 // bb2[2]: scope 0 at <::std::macros::println macros>:2:66: 2:67
        StorageDead(_1);                 // bb2[3]: scope 0 at <::std::macros::println macros>:2:66: 2:67
        return;                          // bb2[4]: scope 0 at src/main.rs:11:2: 11:2
    }
}

promoted[0] in  main: [std::fmt::ArgumentV1; 0] = {
    let mut _0: [std::fmt::ArgumentV1; 0]; // return place in scope 0 at src/main.rs:10:14: 10:29
    let mut _1: [std::fmt::ArgumentV1; 0]; // in scope 0 at src/main.rs:10:14: 10:29

    bb0: {
        _1 = [];                         // bb0[0]: scope 0 at src/main.rs:10:14: 10:29
        _0 = move _1;                    // bb0[1]: scope 0 at src/main.rs:10:14: 10:29
        return;                          // bb0[2]: scope 0 at src/main.rs:10:14: 10:29
    }
}

promoted[1] in  main: [&str; 1] = {
    let mut _0: [&str; 1];               // return place in scope 0 at src/main.rs:10:14: 10:29
    let mut _1: [&str; 1];               // in scope 0 at src/main.rs:10:14: 10:29
    let mut _2: &str;                    // in scope 0 at src/main.rs:10:14: 10:29
    let mut _3: &str;                    // in scope 0 at src/main.rs:10:14: 10:29

    bb0: {
        _3 = const "Hello, World!\n";    // bb0[0]: scope 0 at src/main.rs:10:14: 10:29
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Slice { data: Allocation { bytes: [72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33, 10], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [16383], len: Size { raw: 14 } }, align: Align { pow2: 0 }, mutability: Immutable, extra: () }, start: 0, end: 14 }
                                         // mir::Constant
                                         // + span: src/main.rs:10:14: 10:29
                                         // + ty: &str
                                         // + literal: Const { ty: &str, val: Slice { data: Allocation { bytes: [72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33, 10], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [16383], len: Size { raw: 14 } }, align: Align { pow2: 0 }, mutability: Immutable, extra: () }, start: 0, end: 14 } }
        _2 = _3;                         // bb0[1]: scope 0 at src/main.rs:10:14: 10:29
        _1 = [move _2];                  // bb0[2]: scope 0 at src/main.rs:10:14: 10:29
        _0 = move _1;                    // bb0[3]: scope 0 at src/main.rs:10:14: 10:29
        return;                          // bb0[4]: scope 0 at src/main.rs:10:14: 10:29
    }
}
